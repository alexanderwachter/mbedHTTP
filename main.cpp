#include "mbed.h"
#include "rtos.h"
#include "EthernetInterface.h"
#include "HTTPServer.h"

DigitalIn user_sw(USER_BUTTON);
Serial pc(USBTX, USBRX, 115200);
EthernetInterface net;

const char main_html[] = {
  0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74,
  0x6d, 0x6c, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x3c,
  0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20,
  0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x55, 0x54, 0x46,
  0x2d, 0x38, 0x22, 0x3e, 0x0a, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e,
  0x0a, 0x64, 0x69, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
  0x65, 0x72, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68,
  0x3a, 0x20, 0x31, 0x30, 0x30, 0x25, 0x3b, 0x0a, 0x20, 0x20, 0x62, 0x6f,
  0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x0a,
  0x7d, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x66, 0x6f,
  0x6f, 0x74, 0x65, 0x72, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x70, 0x61, 0x64,
  0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x31, 0x65, 0x6d, 0x3b, 0x0a, 0x20,
  0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x62, 0x6c, 0x61, 0x63,
  0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
  0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x67,
  0x72, 0x65, 0x65, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x63, 0x6c, 0x65, 0x61,
  0x72, 0x3a, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x74,
  0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x20, 0x63,
  0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x6e, 0x61, 0x76,
  0x20, 0x7b, 0x0a, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x20,
  0x6c, 0x65, 0x66, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x6d, 0x61, 0x78, 0x2d,
  0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x70, 0x78,
  0x3b, 0x0a, 0x20, 0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a, 0x20,
  0x30, 0x3b, 0x0a, 0x20, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
  0x3a, 0x20, 0x31, 0x65, 0x6d, 0x3b, 0x0a, 0x7d, 0x0a, 0x6e, 0x61, 0x76,
  0x20, 0x75, 0x6c, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x6c, 0x69, 0x73, 0x74,
  0x2d, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x3a,
  0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x70, 0x61, 0x64,
  0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x6e,
  0x61, 0x76, 0x20, 0x75, 0x6c, 0x20, 0x61, 0x20, 0x7b, 0x0a, 0x20, 0x20,
  0x74, 0x65, 0x78, 0x74, 0x2d, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74,
  0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x0a, 0x7d,
  0x0a, 0x64, 0x69, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
  0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x61, 0x72, 0x67, 0x69,
  0x6e, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x20, 0x31, 0x37, 0x30, 0x70,
  0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65,
  0x72, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x20, 0x31, 0x70, 0x78, 0x20,
  0x73, 0x6f, 0x6c, 0x69, 0x64, 0x20, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x3b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
  0x3a, 0x20, 0x31, 0x65, 0x6d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f,
  0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x20, 0x68, 0x69, 0x64,
  0x64, 0x65, 0x6e, 0x3b, 0x0a, 0x7d, 0x0a, 0x3c, 0x2f, 0x73, 0x74, 0x79,
  0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,
  0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a,
  0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x3e, 0x0a,
  0x20, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x67,
  0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x74, 0x61, 0x67, 0x5f,
  0x69, 0x64, 0x2c, 0x20, 0x70, 0x61, 0x74, 0x68, 0x29, 0x20, 0x7b, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x78, 0x68, 0x74, 0x74,
  0x70, 0x20, 0x3d, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x58, 0x4d, 0x4c, 0x48,
  0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x68, 0x74, 0x74, 0x70, 0x2e,
  0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x74, 0x61, 0x67,
  0x5f, 0x69, 0x64, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x68, 0x74,
  0x74, 0x70, 0x2e, 0x6f, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x73, 0x74,
  0x61, 0x74, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x3d, 0x20,
  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20, 0x7b,
  0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20,
  0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53,
  0x74, 0x61, 0x74, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x20, 0x26, 0x26,
  0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
  0x20, 0x3d, 0x3d, 0x20, 0x32, 0x30, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64,
  0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45,
  0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x74,
  0x68, 0x69, 0x73, 0x2e, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x29, 0x2e,
  0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x3d, 0x20, 0x74, 0x68, 0x69, 0x73,
  0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78,
  0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a,
  0x20, 0x20, 0x20, 0x20, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78,
  0x68, 0x74, 0x74, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x28, 0x22, 0x47,
  0x45, 0x54, 0x22, 0x2c, 0x20, 0x70, 0x61, 0x74, 0x68, 0x2c, 0x20, 0x74,
  0x72, 0x75, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x68,
  0x74, 0x74, 0x70, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x28, 0x29, 0x3b, 0x20,
  0x0a, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x66, 0x75,
  0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x56, 0x61,
  0x6c, 0x75, 0x65, 0x28, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x2c, 0x20,
  0x70, 0x61, 0x74, 0x68, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
  0x76, 0x61, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x3d, 0x20,
  0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74,
  0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28,
  0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x29, 0x2e, 0x76, 0x61, 0x6c, 0x75,
  0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x61, 0x72, 0x20, 0x78,
  0x68, 0x74, 0x74, 0x70, 0x20, 0x3d, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x58,
  0x4d, 0x4c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
  0x74, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x68, 0x74,
  0x74, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x28, 0x22, 0x50, 0x4f, 0x53,
  0x54, 0x22, 0x2c, 0x20, 0x70, 0x61, 0x74, 0x68, 0x2c, 0x20, 0x74, 0x72,
  0x75, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x68, 0x74,
  0x74, 0x70, 0x2e, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
  0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x28, 0x22, 0x43, 0x6f, 0x6e,
  0x74, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x20,
  0x22, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
  0x2f, 0x78, 0x2d, 0x77, 0x77, 0x77, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x2d,
  0x75, 0x72, 0x6c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x22, 0x29,
  0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x68, 0x74, 0x74, 0x70, 0x2e,
  0x73, 0x65, 0x6e, 0x64, 0x28, 0x22, 0x64, 0x61, 0x74, 0x61, 0x3d, 0x22,
  0x20, 0x2b, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x29, 0x3b, 0x20, 0x0a,
  0x20, 0x20, 0x7d, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
  0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62,
  0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c,
  0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
  0x65, 0x72, 0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
  0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x68, 0x31, 0x3e, 0x47, 0x72, 0x6f, 0x77,
  0x20, 0x42, 0x6f, 0x78, 0x3c, 0x2f, 0x68, 0x31, 0x3e, 0x0a, 0x3c, 0x2f,
  0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3e, 0x0a, 0x3c, 0x6e, 0x61, 0x76,
  0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x75, 0x6c, 0x3e, 0x0a, 0x20, 0x20, 0x20,
  0x20, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
  0x3d, 0x22, 0x23, 0x22, 0x3e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3c, 0x2f,
  0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20,
  0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
  0x22, 0x23, 0x22, 0x3e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
  0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x0a, 0x20, 0x20,
  0x3c, 0x2f, 0x75, 0x6c, 0x3e, 0x0a, 0x3c, 0x2f, 0x6e, 0x61, 0x76, 0x3e,
  0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
  0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x0a,
  0x20, 0x20, 0x3c, 0x68, 0x31, 0x3e, 0x47, 0x72, 0x6f, 0x77, 0x20, 0x42,
  0x6f, 0x78, 0x3c, 0x2f, 0x68, 0x31, 0x3e, 0x0a, 0x20, 0x20, 0x56, 0x61,
  0x6c, 0x75, 0x65, 0x3a, 0x20, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20,
  0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20,
  0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76,
  0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x74, 0x65,
  0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x3c, 0x62,
  0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x63, 0x6c, 0x69, 0x63,
  0x6b, 0x3d, 0x22, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28,
  0x27, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
  0x2c, 0x20, 0x27, 0x64, 0x61, 0x74, 0x61, 0x27, 0x29, 0x3b, 0x22, 0x3e,
  0x73, 0x65, 0x74, 0x3c, 0x2f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x3e,
  0x0a, 0x20, 0x20, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c,
  0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x3e, 0x43, 0x6f, 0x70, 0x79, 0x72,
  0x69, 0x67, 0x68, 0x74, 0x20, 0x26, 0x63, 0x6f, 0x70, 0x79, 0x3b, 0x20,
  0x41, 0x6c, 0x65, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x57, 0x61,
  0x63, 0x68, 0x74, 0x65, 0x72, 0x3c, 0x2f, 0x66, 0x6f, 0x6f, 0x74, 0x65,
  0x72, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x73,
  0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
  0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
  0x69, 0x70, 0x74, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x67, 0x65, 0x74, 0x56,
  0x61, 0x6c, 0x75, 0x65, 0x28, 0x22, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76,
  0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61,
  0x22, 0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
  0x3e, 0x0a, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,
  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a
};
unsigned int main_html_len = 1698;


class TestHandler : public HTTPRequestHandler
{
public:
  TestHandler(){}
  virtual ~TestHandler(){}
  void doGet(HTTPRequest&, HTTPResponse&);
  void doPost(HTTPRequest&, HTTPResponse&);
  void doPut(HTTPRequest&, HTTPResponse&);
  void doDelete(HTTPRequest&, HTTPResponse&);
  static const char* _message;
};

void TestHandler::doGet(HTTPRequest& request, HTTPResponse& response)
{
  response.setData(main_html, main_html_len);
}

void TestHandler::doPost(HTTPRequest& request, HTTPResponse& response)
{
  static string page =
  "<!DOCTYPE html>\n"
  "<html>\n"
  "<head>\n"
  "<title>Mbed HTTPServer test page</title>\n"
  "</head>\n"
  "<body>\n"
  "<h1>POST Data:</h1>\n";

  for(auto data_it = request._request_data.begin(); data_it != request._request_data.end(); data_it++)
  {
    page += "<p>" + data_it->first + ": " + data_it->second + "</p>";
  }
  page += "</body>\n"
  "</html>";
  response.setData(page.c_str());
}

void TestHandler::doPut(HTTPRequest& request, HTTPResponse& response)
{
  response.setRespCode(HTTP_MethodNotAllowed);
}

void TestHandler::doDelete(HTTPRequest& request, HTTPResponse& response)
{
  response.setRespCode(HTTP_MethodNotAllowed);
}

char _message[30];

class DataHandler : public HTTPRequestHandler
{
public:
  DataHandler():_data(10){}
  virtual ~DataHandler(){}
  void doGet(HTTPRequest&, HTTPResponse&);
  void doPost(HTTPRequest&, HTTPResponse&);
  void doPut(HTTPRequest& request, HTTPResponse& response){ response.setRespCode(HTTP_MethodNotAllowed); };
  void doDelete(HTTPRequest&, HTTPResponse&);
  int _data;
private:
};

void DataHandler::doGet(HTTPRequest& request, HTTPResponse& response)
{
  string msg;
  msg = to_string(_data);
  msg += " units";
  strcpy(_message, msg.c_str());
  response.setData(_message);
};
void DataHandler::doPost(HTTPRequest& request, HTTPResponse& response)
{
  auto data_it = request._request_data.find("data");
  if(data_it == request._request_data.end())
  {
    response.setRespCode(HTTP_NotModified);
    return;
  }
  _data = atoi(data_it->second.c_str());
}

void DataHandler::doDelete(HTTPRequest& request, HTTPResponse& response)
{
  _data = 0;
}

TestHandler test_h;
DataHandler data_h;
DigitalOut led1(LED1);

int main() 
{
  printf("Start eth\n");
  net.set_network("10.0.0.10", "255.0.0.0", "10.0.0.1");
  if(net.connect())
  {
    printf("Faild to connect");
    return -1;
  }
  const char *ip = net.get_ip_address();
  printf("IP address is: %s\n", ip ? ip : "No IP");
  HTTPServer http_server(&net);
  http_server.runThread();
  http_server.addHandler(&test_h, "/main.html");
  http_server.addHandler(&data_h, "/data");
  while(true)
  {
    led1 = !led1;
    wait(0.5);
  }

}
